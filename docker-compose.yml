version: "3.7"
services:
  mongodb:
    image: mongo:6.0.6
    container_name: 'mongo'
    restart: always
    ports:
      - 27017:27017
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand('ping').ok"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - backend_services
  rabbitmq:
    image: rabbitmq:3.11.17-management-alpine
    container_name: 'rabbitmq'
    restart: always
    environment:
      - "RABBITMQ_DEFAULT_USER=username"
      - "RABBITMQ_DEFAULT_PASS=password"
    ports:
      - 15672:15672
      - 5672:5672
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - ../../rabbitmq_enabled_plugins:/etc/rabbitmq/enabled_plugins
    networks:
      - backend_services
  order-service:
    image: dejmartins/order-service:latest
    container_name: 'order-service'
    restart: always
    ports:
      - 3000:3000
    healthcheck:
      test: ["CMD", "wget", "-O", "/dev/null", "-q", "http://order-service:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - ORDER_QUEUE_URI=${ORDER_QUEUE_URI}
      - ORDER_QUEUE_HOSTNAME=${ORDER_QUEUE_HOSTNAME}
      - ORDER_QUEUE_USERNAME=${ORDER_QUEUE_USERNAME}
      - ORDER_QUEUE_PASSWORD=${ORDER_QUEUE_PASSWORD}
      - ORDER_QUEUE_NAME=${ORDER_QUEUE_NAME}
      - USE_WORKLOAD_IDENTITY_AUTH=${USE_WORKLOAD_IDENTITY_AUTH}
      - ORDER_DB_URI=${ORDER_DB_URI}
      - ORDER_DB_NAME=${ORDER_DB_NAME}
      - ORDER_DB_COLLECTION_NAME=${ORDER_DB_COLLECTION_NAME}
      - ORDER_QUEUE_PORT=${ORDER_QUEUE_PORT}
      - ORDER_QUEUE_TRANSPORT=${ORDER_QUEUE_TRANSPORT}
      
    networks:
      - backend_services
  # virtual-customer:
  #   image: ramymohamed/virtual-customer-l8:latest
  #   container_name: 'virtual-customer'
  #   restart: always
  #   environment:
  #     - ORDER_SERVICE_URL=http://order-service:3000/
  #     - ORDERS_PER_HOUR=60
  #   networks:
  #     - backend_services
  #   depends_on:
  #     order-service:
  #       condition: service_healthy
networks:
  backend_services:
    driver: bridge